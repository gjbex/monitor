#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use Fcntl;
use Getopt::Long;
use IO::File;
use List::Util qw( first );
use Set::Scalar;

# some constants and settings
# exit value if something goes wrong in monitor itself, can be overriden
# via environment variable
my $exit_error = 65;
if (exists $ENV{MONITOR_EXIT_ERROR}) {
    $exit_error = $ENV{MONITOR_EXIT_ERROR};
}
my $ps_cmd = '/bin/ps -e';
# default sampling interval
my $default_delta = 5;
# quantities to monitor and their corresponding units, if applicable
my $time_unit = " (s)";
my @fields = ('size', '%mem', '%cpu');
my %units = (
    'size' => ' (kb)',
    '%mem' =>  '',
    '%cpu' =>  ''
    );
my $file_size_unit = ' (b)';
# string to show for file size if the file does not exist (yet?)
my $no_such_file = 'N/A';

my $cycle = 0;
my $sample_nr = 0;

# fetch command line options
my $delta = undef;
my $log_file = undef;
my @files = ();
my $file_str = undef;
my $existing_pid = undef;
my $nr_lines = undef;
my $verbose = undef;

GetOptions(
    "d=s" => \$delta,
    "l=s" => \$log_file,
    "f=s" => \$file_str,
    "n=i" => \$nr_lines,
    'p=i' => \$existing_pid,
    "v"   => \$verbose,
    "h"   => \&show_help
    );

# compute delta if provided via command line option
if (defined $delta) {
    $delta = compute_time($delta);
} else {
    $delta = $default_delta;
}
print STDERR "### sampling at $delta seconds intervals...\n" if $verbose;

# if a log file is given, use it, otherwise, output to STDERR
my $out = undef;
if (defined $log_file) {
    $out = IO::File->new();
    unless ($out->open($log_file, 'w')) {
        print STDERR "### error: can't open log file: $!\n";
        exit $exit_error;
    }
    if (defined $nr_lines && $nr_lines > 0) {
        $cycle = 1;
    }
} else {
    $out = *STDERR;
}

# determine files to monitor, can be none
if (defined $file_str) {
    @files = split(/\s*,\s*/, $file_str);
}

# check whether a command was given via the command line, exit if not
if (scalar(@ARGV) == 0 && !defined $existing_pid) {
    print STDERR "### error: no command or PID specified to monitor\n";
    print_help();
    exit $exit_error;
}

# print headers
my $header = "time $time_unit\t" . join("\t", map {"$_$units{$_}"} @fields);
$header .= "\t" . join("\t", map {"$_$file_size_unit"} @files)
    if scalar(@files) > 0;
my $line_length = compute_line_length($header);
print $out fit_line($header);

my $start_time = time();
if (defined $existing_pid) {
    while (is_running($existing_pid)) {
        sleep($delta);
        sample($existing_pid, \@fields, $out, \@files);
    }
} else {
# format command to be monitored
    my $cmd = shift(@ARGV);
    $cmd .= " " . join(" ", map {"'$_'"} @ARGV);

    my $rc = $exit_error;
    my $pid = fork;
    while (1) {
        eval {
            $SIG{ALRM} = sub { die "sample\n" };
            die "could not fork" unless defined $pid;
            if ($pid) {
                alarm $delta;
                waitpid $pid, 0;
                $rc = $? >> 8;
            } else {
                print STDERR "### executing $cmd...\n" if $verbose;
                exec $cmd;
            }
        };
        if ($pid && $@) {
            print STDERR "### sampling $pid...\n" if $verbose;
            sample($pid, \@fields, $out, \@files);
            $sample_nr++;
        } else {
            $out->close() if defined $log_file;
            exit $rc;
        }
    }
}

sub sample {
    my ($pid, $fields, $out, $files) = @_;
    my @processes = compute_processes(['user', 'pid', 'ppid', @{$fields}, 'cmd']);
    my %total = (map {$_ => 0} @{$fields});
    my $pids = compute_pids($pid, @processes);
    print STDERR "considering processes ", join(', ', $pids->members), "...\n" if $verbose;
    foreach my $process (grep {$pids->has($_->{pid})} @processes) {
        $Data::Dumper::Terse = 1;
        print STDERR Dumper($process) if $verbose;
        $Data::Dumper::Terse = 0;
        $total{$_} += $process->{$_} foreach (@{$fields});
    }
    my $sample = time() - $start_time;
    $sample .= "\t$total{$_}" foreach (@{$fields});
    $sample .= "\t" . ((-e $_ && -r $_) ? (-s $_) : $no_such_file)
        foreach (@{$files});
    seek_position($out);
    print $out fit_line($sample);
}

sub compute_processes {
    my $fields = shift(@_);
    my @processes = ();
    my $cmd_str = "$ps_cmd -o " . join(',', @{$fields});
    print STDERR "executing $cmd_str...\n" if $verbose;
    open(PS, "$cmd_str |") or die("can't run $ps_cmd");
    while (my $process_info = <PS>) {
        chomp($process_info);
        $process_info =~ s/^\s+//;
        $process_info =~ s/\s+$//;
        ##print STDERR "'$process_info'\n" if $verbose;
        my @process_info = split(/\s+/, $process_info, scalar(@{$fields}));
        push(@processes, {map {$_ => shift(@process_info)} @{$fields}});
    } 
    close(PS);
    return @processes;
}

sub is_running {
    my ($pid) = @_;
    my @pids = map {$_->{pid}} compute_processes(['pid']);
    return defined first {$_ eq $pid} @pids;
}

sub compute_pids {
    my ($pid, @processes) = @_;
    my $pids = Set::Scalar->new($pid);
    my $done = Set::Scalar->new();
    my @ppids = ($pid);
    while (my $ppid = shift(@ppids)) {
        next if $done->has($ppid);
        foreach my $process (@processes) {
            if ($process->{ppid} eq $ppid) {
                push(@ppids, $process->{pid});
                $pids->insert($process->{pid});
            }
        }
        $done->insert($ppid);
    }
    return $pids;
}

sub compute_time {
    my ($time_str) = @_;
    if ($time_str =~ /^\d+$/) {
        return $time_str;
    } elsif ($time_str =~ /^(\d+):(\d+)$/) {
        return $1*60 + $2;
    } elsif ($time_str =~ /^(\d+):(\d+):(\d+)$/) {
        return $1*3600 + $2*60 + $3;
    } elsif ($time_str =~ /^(\d+):(\d+):(\d+):(\d+)$/) {
        return $1*24*3600 + $2*3600 + $3*60 + $4;
    } else {
        print STDERR "### error: time must be specified as [[dd:]hh:]mm:ss\n";
        exit $exit_error;
    }
}

sub compute_line_length {
    my $header = shift(@_);
    my $header_length = length($header);
    my $sample_length = 12 + scalar(@fields)*(1 + 12) +
        scalar(@files)*(1 + 15);
    return ($header_length < $sample_length) ?
        $sample_length : $header_length;
}

sub fit_line {
    my $str = shift(@_);
    if ($cycle) {
        if (length($str) < $line_length) {
            $str .= (' ' x ($line_length - length($str)));
            return $str . "\n";
        } else {
            return substr($str, 0, 80) . "\n";
        }
    } else {
        return "$str\n";
    }
}

sub seek_position {
    my $out = shift(@_);
    if ($cycle) {
        my $position = (1 + $sample_nr % $nr_lines)*($line_length + 1);
        $out->seek($position, $Fcntl::SEEK_SET);
    }
}


sub show_help {
    print_help();
    exit 0;
}

sub print_help {
    print << "EOI";
### usage: monitor [-d <delta>] [-l <logfile>] [-f <files>]
#                  [-h] [-v] <cmd> | -p <pid>
# Monitor can be used to sample resource utilization of a process
# over time.  Monitor can sample a running process if the latter's PID
# is specified using the -p option, or it can start a command with
# parameters passed as arguments.  When one has to specify flags for
# the command to run, '--' can be used to delimit monitor's options, e.g.,
#    monitor -delta 5 -- matlab -nojvm -nodisplay calc.m
# Resources that can be monitored are memory and CPU utilization, as
# well as file sizes.
# The sampling resolution is determined by delta, i.e., monitor samples
# every <delta> seconds.
# -d <delta>   : sampling interval, specified in
#                seconds, or as [[dd:]hh:]mm:ss
# -l <logfile> : file to store sampling information; if omitted,
#                monitor information is printed on stderr
# -n <lines>   : retain only the last <lines> lines in the log file,
#                note that this option only makes sense when combined
#                with -l, and that the log file lines will not be sorted
#                according to time
# -f <files>   : comma-separated list of file names that are monitored
#                for size; if a file doesn't exist at a given time, the
#                entry will be 'N/A'
# -v           : give verbose feedback
# -h           : print this help message and exit
# <cmd>        : actual command to run, followed by whatever
#                parameters needed
# -p <pid>     : process ID to monitor
#
# Exit status: * 65 for any montor related error
#              * exit status of <cmd> otherwise
# Note: if the exit code 65 conflicts with those of the
#       command to run, it can be customized by setting the
#       environment variables 'MONITOR_EXIT_ERROR' to any value
#       between 1 and 255 (0 is not prohibited, but this is probably.
#       not what you want).
EOI
}

